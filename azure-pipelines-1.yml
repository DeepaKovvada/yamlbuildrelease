# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
 name: Default
stages:
- stage: Build
  jobs:
    - job: Build job
       steps

       - task:CopyFiles@2
         displayName:Copy files
         inputs:
           Contents: '**'
           TargetFolder: '$(Build.ArtifactStagingDirectory)'
       - task: PublishBuildArtifacts@1
         displayName: publish artifacts
         inputs:
         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
 - stage: Deploy
  jobs:
    - job:
      steps:
       - task: DownloadBuildArtifacts@1
         inputs:
           buildType: 'current'
           downloadType: 'single'
           artifactName: 'drop'
           downloadPath: '$(System.ArtifactsDirectory)'
       - task: TerraformInstaller@0
         displayName: terraform installer
         inputs:
            terraformVersion: 'latest'
       - task: TerraformTaskV3@3
         displayName: terraform init
         inputs:
           provider: 'azurerm'
           command: 'init'
           backendServiceArm: 'azure connection'
           backendAzureRmResourceGroupName: 'envrg'
           backendAzureRmStorageAccountName: 'envstrgacnt'
           backendAzureRmContainerName: 'container1'
           backendAzureRmKey: 'cicid1.tfstate'
       - task: TerraformTaskV3@3
         displayName: terraform plan
         inputs:
           provider: 'azurerm'
           command: 'plan'
           environmentServiceNameAzureRM: 'azure connection'
       - task: TerraformTaskV3@3
         displayName: terrafom apply
          inputs:
           provider: 'azurerm'
            command: 'apply'
            environmentServiceNameAzureRM: 'azure connection'

    
       
